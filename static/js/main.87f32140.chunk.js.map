{"version":3,"sources":["components/UserForm.js","components/UsersList.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["UserForm","addUser","e","preventDefault","console","log","_this","inputValue","value","props","update","_this2","this","react_default","a","createElement","onSubmit","type","placeholder","ref","data","Component","UsersList","removeUser","key","delete","listItems","users","map","user","index","onClick","className","Users","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateUserList","name","setState","prevState","concat","deleteUser","keyValue","updateUsersList","state","filter","indexOf","components_UserForm","components_UsersList","App","src_Users","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAuBeA,oNAjBXC,QAAU,SAACC,GACPA,EAAEC,iBACFC,QAAQC,IAAIC,EAAKC,WAAWC,OAC5BF,EAAKG,MAAMC,OAAOJ,EAAKC,WAAWC,gFAG/B,IAAAG,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,KAAKX,SACjBY,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,oBAAoBC,IAAK,SAACC,GAAQT,EAAKJ,WAAaa,KACnFP,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAAST,MAAM,0BAZda,cCuBRC,6MArBXC,WAAa,SAACC,GACVpB,QAAQC,IAAImB,GACZlB,EAAKG,MAAMgB,OAAOD,4EAIf,IAAAb,EAAAC,KAEDc,EAAYd,KAAKH,MAAMkB,MAAMC,IAAI,SAACC,EAAMC,GAC1C,OAAOjB,EAAAC,EAAAC,cAAA,MAAIS,IAAKM,EAAOC,QAAS,kBAAIpB,EAAKY,WAAWO,KAASD,KAIjE,OACEhB,EAAAC,EAAAC,cAAA,MAAIiB,UAAU,cACdN,UAjBkBL,aC8CTY,cA1CX,SAAAA,IAAc,IAAA3B,EAAA,OAAA4B,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACV3B,EAAA4B,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,QAOJ2B,eAAiB,SAACC,GACdlC,EAAKmC,SAAS,SAACC,GACX,MAAO,CAACf,MAAOe,EAAUf,MAAMgB,OAAOH,OAVhClC,EAedsC,WAAa,SAACC,GACVzC,QAAQC,IAAI,6BAA+BwC,GAE3C,IAAIC,EAAkBxC,EAAKyC,MAAMpB,MAAMqB,OAAO,SAACnB,GAE3C,OAAOvB,EAAKyC,MAAMpB,MAAMsB,QAAQpB,KAAUgB,IAG9CvC,EAAKmC,SAAS,CACVd,MAAOmB,KArBXxC,EAAKyC,MAAQ,CACTpB,MAAM,CAAC,OAAQ,MAAO,UAJhBrB,wEAgCd,OACEO,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,SAChBnB,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACmC,EAAD,CAAWxC,OAAQE,KAAK2B,iBACxB1B,EAAAC,EAAAC,cAACoC,EAAD,CAAYxB,MAAOf,KAAKmC,MAAMpB,MAAOF,OAAQb,KAAKgC,qBAtCnCvB,aCWL+B,mLATX,OACEvC,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACfnB,EAAAC,EAAAC,cAACsC,EAAD,cAJYhC,aCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.87f32140.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass UserForm extends Component {\n\n    addUser = (e) => {\n        e.preventDefault();\n        console.log(this.inputValue.value);\n        this.props.update(this.inputValue.value);\n    }\n\n  render() {\n    return (\n      <form onSubmit={this.addUser}>\n          <input type=\"text\" placeholder=\"Nazwa uzytkownika\" ref={(data)=>{this.inputValue = data}}/>\n          <input type=\"submit\" value=\"PrzeÅ›lij\" />\n\n      </form>\n    );\n  }\n}\n\nexport default UserForm;","import React, { Component } from 'react';\n\n\n\nclass UsersList extends Component {\n\n    removeUser = (key) => {\n        console.log(key);\n        this.props.delete(key);\n    }\n\n\n  render() {\n\n    const listItems = this.props.users.map((user, index)=>{\n        return <li key={index} onClick={()=>this.removeUser(index)}>{user}</li>;\n\n    });\n\n    return (\n      <ul className=\"users-list\">\n     {listItems}\n    </ul>\n    );\n  }\n}\n\nexport default UsersList;","import React, { Component } from 'react';\n\nimport UserForm from './components/UserForm';\nimport UsersList from './components/UsersList';\n\n\nclass Users extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            users:['Adam', 'Ola', 'Karol']\n        }\n    }\n\n    updateUserList = (name) => {\n        this.setState((prevState) => {\n            return({users: prevState.users.concat(name)})\n\n        });\n    }\n\n    deleteUser = (keyValue) => {\n        console.log('usun uzytkownika z indexem' + keyValue);\n\n        let updateUsersList = this.state.users.filter((user)=>{\n\n            return this.state.users.indexOf(user) !== keyValue;\n        });\n\n        this.setState({\n            users: updateUsersList\n        });\n    }\n\n\n\n  render() {\n\n    return (\n      <div className=\"Users\">\n     <h1>User's list</h1>\n     <UserForm  update={this.updateUserList}/>\n     <UsersList  users={this.state.users} delete={this.deleteUser}/>\n      </div>\n    );\n  }\n}\n\nexport default Users;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Users from './Users';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Users/>\n     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}